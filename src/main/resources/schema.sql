create table languages
(
    id          bigint generated by default as identity
        primary key,
    code        varchar(10) not null
        constraint ukmyc139vxcejowe4q8qm3ca5jn
            unique,
    name        varchar(50) not null,
    native_name varchar(50)
);

alter table languages
    owner to root;

grant select, update, usage on sequence languages_id_seq to twaincards_user;

grant select, update, usage on sequence languages_id_seq to twaincards_premium;

grant select, update, usage on sequence languages_id_seq to twaincards_admin;

create policy admin_all_access_languages on languages
    as permissive
    for all
    to twaincards_admin
    using true
with check true;

create policy universal_access_languages on languages
    as permissive
    for all
    to twaincards_user, twaincards_premium, twaincards_admin
    using true
with check true;

grant delete, insert, references, select, trigger, truncate, update on languages to twaincards_user;

grant delete, insert, references, select, trigger, truncate, update on languages to twaincards_premium;

grant delete, insert, references, select, trigger, truncate, update on languages to twaincards_admin;

create table common_words
(
    id                   bigint generated by default as identity
        primary key,
    source_language_code varchar(10)  not null,
    source_text          varchar(255) not null,
    target_language_code varchar(10)  not null,
    target_text          varchar(255) not null,
    constraint uq_source_text_source_lang_target_lang
        unique (source_text, source_language_code, target_language_code)
);

alter table common_words
    owner to root;

grant select, update, usage on sequence common_words_id_seq to twaincards_user;

grant select, update, usage on sequence common_words_id_seq to twaincards_premium;

grant select, update, usage on sequence common_words_id_seq to twaincards_admin;

create index idx_source_text
    on common_words (source_text);

create index idx_source_language_target_language
    on common_words (source_language_code, target_language_code);

create policy admin_all_access_common_words on common_words
    as permissive
    for all
    to twaincards_admin
    using true
with check true;

create policy universal_access_common_words on common_words
    as permissive
    for all
    to twaincards_user, twaincards_premium, twaincards_admin
    using true
with check true;

grant delete, insert, references, select, trigger, truncate, update on common_words to twaincards_user;

grant delete, insert, references, select, trigger, truncate, update on common_words to twaincards_premium;

grant delete, insert, references, select, trigger, truncate, update on common_words to twaincards_admin;

create table roles
(
    id   bigint generated by default as identity
        primary key,
    name varchar(20) not null
        constraint ukofx66keruapi6vyqpv6f2or37
            unique
);

alter table roles
    owner to root;

grant select, update, usage on sequence roles_id_seq to twaincards_user;

grant select, update, usage on sequence roles_id_seq to twaincards_premium;

grant select, update, usage on sequence roles_id_seq to twaincards_admin;

create table users
(
    id                bigint generated by default as identity
        primary key,
    email             varchar(100) not null
        constraint uk6dotkott2kjsp8vw4d0m25fb7
            unique,
    first_name        varchar(50),
    is_active         boolean,
    last_login_date   timestamp(6),
    last_name         varchar(50),
    password_hash     varchar(255) not null,
    registration_date timestamp(6),
    role              varchar(20)
        constraint users_role_check
            check ((role)::text = ANY
                   ((ARRAY ['USER'::character varying, 'PREMIUM'::character varying, 'ADMIN'::character varying])::text[])),
    username          varchar(50)  not null
        constraint ukr43af9ap4edm43mmtq01oddj6
            unique,
    role_id           bigint
        constraint fkp56c1712k691lhsyewcssf40f
            references roles
);

alter table users
    owner to root;

grant select, update, usage on sequence users_id_seq to twaincards_user;

grant select, update, usage on sequence users_id_seq to twaincards_premium;

grant select, update, usage on sequence users_id_seq to twaincards_admin;

create table collections
(
    id                 bigint generated by default as identity
        primary key,
    created_at         timestamp(6),
    description        varchar(255),
    is_public          boolean,
    name               varchar(100) not null,
    updated_at         timestamp(6),
    source_language_id bigint       not null
        constraint fkk1usnbbmxs34vkwb4qo5x1p9o
            references languages,
    target_language_id bigint       not null
        constraint fk469bb6ql9iosm1wtfq47bmpg7
            references languages,
    user_id            bigint       not null
        constraint fkn7pdedyqaiddr0uxdj603my7d
            references users,
    users_count        integer
);

alter table collections
    owner to root;

grant select, update, usage on sequence collections_id_seq to twaincards_user;

grant select, update, usage on sequence collections_id_seq to twaincards_premium;

grant select, update, usage on sequence collections_id_seq to twaincards_admin;

create table cards
(
    id            bigint generated by default as identity
        primary key,
    back_text     varchar(255) not null,
    created_at    timestamp(6),
    example_usage varchar(255),
    front_text    varchar(255) not null,
    updated_at    timestamp(6),
    collection_id bigint       not null
        constraint fkkgkv1nd36jejnwv6pbs0tn7bt
            references collections
);

alter table cards
    owner to root;

grant select, update, usage on sequence cards_id_seq to twaincards_user;

grant select, update, usage on sequence cards_id_seq to twaincards_premium;

grant select, update, usage on sequence cards_id_seq to twaincards_admin;

create policy card_access on cards
    as permissive
    for all
    to twaincards_user
    using (collection_id IN (SELECT collections.id
                             FROM collections
                             WHERE ((collections.user_id = (current_setting('app.user_id'::text))::bigint) OR
                                    (collections.is_public = true))));

create policy cards_user_access on cards
    as permissive
    for all
    using ((collection_id IN (SELECT collections.id
                              FROM collections
                              WHERE (collections.user_id = (current_setting('app.user_id'::text, true))::bigint))) OR
           (collection_id IN (SELECT collections.id
                              FROM collections
                              WHERE (collections.is_public = true))));

create policy cards_admin_access on cards
    as permissive
    for all
    using (CURRENT_USER = 'twaincards_admin'::name);

create policy cards_all on cards
    as permissive
    for all
    using (collection_id IN (SELECT collections.id
                             FROM collections
                             WHERE ((collections.user_id = (current_setting('app.user_id'::text, true))::bigint) OR
                                    (collections.is_public = true))))
    with check (collection_id IN (SELECT collections.id
                                  FROM collections
                                  WHERE (collections.user_id = (current_setting('app.user_id'::text, true))::bigint)));

create policy admin_all_access_cards on cards
    as permissive
    for all
    to twaincards_admin
    using true
with check true;

create policy universal_access_cards on cards
    as permissive
    for all
    to twaincards_user, twaincards_premium, twaincards_admin
    using true
with check true;

grant delete, insert, references, select, trigger, truncate, update on cards to twaincards_user;

grant delete, insert, references, select, trigger, truncate, update on cards to twaincards_premium;

grant delete, insert, references, select, trigger, truncate, update on cards to twaincards_admin;

create policy collection_access on collections
    as permissive
    for all
    to twaincards_user
    using ((user_id = (current_setting('app.user_id'::text))::bigint) OR (is_public = true));

create policy collections_user_access on collections
    as permissive
    for all
    using ((user_id = (current_setting('app.user_id'::text, true))::bigint) OR (is_public = true));

create policy collections_admin_access on collections
    as permissive
    for all
    using (CURRENT_USER = 'twaincards_admin'::name);

create policy collections_select on collections
    as permissive
    for select
    using ((user_id = (current_setting('app.user_id'::text, true))::bigint) OR (is_public = true));

create policy collections_insert on collections
    as permissive
    for insert
    with check true;

create policy collections_update on collections
    as permissive
    for update
    using (user_id = (current_setting('app.user_id'::text, true))::bigint);

create policy collections_delete on collections
    as permissive
    for delete
    using (user_id = (current_setting('app.user_id'::text, true))::bigint);

create policy collections_view_policy on collections
    as permissive
    for select
    using ((user_id = (current_setting('app.user_id'::text, true))::bigint) OR (is_public = true));

create policy admin_all_access_collections on collections
    as permissive
    for all
    to twaincards_admin
    using true
with check true;

create policy universal_access_collections on collections
    as permissive
    for all
    to twaincards_user, twaincards_premium, twaincards_admin
    using true
with check true;

grant delete, insert, references, select, trigger, truncate, update on collections to twaincards_user;

grant delete, insert, references, select, trigger, truncate, update on collections to twaincards_premium;

grant delete, insert, references, select, trigger, truncate, update on collections to twaincards_admin;

create table learning_progress
(
    id                bigint generated by default as identity
        primary key,
    correct_answers   integer,
    incorrect_answers integer,
    last_reviewed_at  timestamp(6),
    learning_status   varchar(20)
        constraint learning_progress_learning_status_check
            check ((learning_status)::text = ANY
                   ((ARRAY ['NEW'::character varying, 'LEARNING'::character varying, 'REVIEW'::character varying, 'KNOWN'::character varying])::text[])),
    next_review_date  timestamp(6),
    repetition_count  integer,
    card_id           bigint not null
        constraint fk2fck0stmu3pexf320jkpxx1m8
            references cards,
    user_id           bigint not null
        constraint fkkex4pny6sl5affwroon8lfbjt
            references users,
    constraint uk4i1i1qcwy35ayngbk1mhk20o8
        unique (user_id, card_id)
);

alter table learning_progress
    owner to root;

grant select, update, usage on sequence learning_progress_id_seq to twaincards_user;

grant select, update, usage on sequence learning_progress_id_seq to twaincards_premium;

grant select, update, usage on sequence learning_progress_id_seq to twaincards_admin;

create policy learning_progress_all on learning_progress
    as permissive
    for all
    using (user_id = (current_setting('app.user_id'::text, true))::bigint)
    with check (user_id = (current_setting('app.user_id'::text, true))::bigint);

create policy admin_all_access_learning_progress on learning_progress
    as permissive
    for all
    to twaincards_admin
    using true
with check true;

create policy universal_access_learning_progress on learning_progress
    as permissive
    for all
    to twaincards_user, twaincards_premium, twaincards_admin
    using true
with check true;

grant delete, insert, references, select, trigger, truncate, update on learning_progress to twaincards_user;

grant delete, insert, references, select, trigger, truncate, update on learning_progress to twaincards_premium;

grant delete, insert, references, select, trigger, truncate, update on learning_progress to twaincards_admin;

create table study_sessions
(
    id                       bigint generated by default as identity
        primary key,
    cards_reviewed           integer,
    correct_answers          integer,
    device_type              varchar(50),
    is_completed             boolean,
    platform                 varchar(50),
    user_id                  bigint not null
        constraint fk1pw09mt08ohr4r1cuu33qwyw0
            references users,
    session_duration_seconds integer,
    end_time                 timestamp(6),
    start_time               timestamp(6)
);

alter table study_sessions
    owner to root;

grant select, update, usage on sequence study_sessions_id_seq to twaincards_user;

grant select, update, usage on sequence study_sessions_id_seq to twaincards_premium;

grant select, update, usage on sequence study_sessions_id_seq to twaincards_admin;

create table learning_history
(
    id               bigint generated by default as identity
        primary key,
    action_type      varchar(20) not null
        constraint learning_history_action_type_check
            check ((action_type)::text = ANY
                   ((ARRAY ['CREATE'::character varying, 'VIEW'::character varying, 'REVIEW'::character varying, 'EDIT'::character varying, 'DELETE'::character varying])::text[])),
    is_correct       boolean,
    performed_at     timestamp(6),
    card_id          bigint      not null
        constraint fk226uulmkra97rmh6hdvrdtekf
            references cards,
    study_session_id bigint
        constraint fkkyqcnomoa8w7qa4c9vbxnkyeg
            references study_sessions,
    user_id          bigint      not null
        constraint fkv4awstvslfgpoowth514cu15
            references users
);

alter table learning_history
    owner to root;

grant select, update, usage on sequence learning_history_id_seq to twaincards_user;

grant select, update, usage on sequence learning_history_id_seq to twaincards_premium;

grant select, update, usage on sequence learning_history_id_seq to twaincards_admin;

create policy learning_history_all on learning_history
    as permissive
    for all
    using (user_id = (current_setting('app.user_id'::text, true))::bigint)
    with check (user_id = (current_setting('app.user_id'::text, true))::bigint);

create policy admin_all_access_learning_history on learning_history
    as permissive
    for all
    to twaincards_admin
    using true
with check true;

create policy universal_access_learning_history on learning_history
    as permissive
    for all
    to twaincards_user, twaincards_premium, twaincards_admin
    using true
with check true;

grant delete, insert, references, select, trigger, truncate, update on learning_history to twaincards_user;

grant delete, insert, references, select, trigger, truncate, update on learning_history to twaincards_premium;

grant delete, insert, references, select, trigger, truncate, update on learning_history to twaincards_admin;

create table session_collections
(
    session_id    bigint not null
        constraint fk34s2ifi5bsl7b8n8rp1p6c0q7
            references study_sessions,
    collection_id bigint not null
        constraint fktbj1ycxi4btfrta6o9ufbkbex
            references collections,
    primary key (session_id, collection_id)
);

alter table session_collections
    owner to root;

create policy session_collections_all on session_collections
    as permissive
    for all
    using (session_id IN (SELECT study_sessions.id
                          FROM study_sessions
                          WHERE (study_sessions.user_id = (current_setting('app.user_id'::text, true))::bigint)))
    with check (session_id IN (SELECT study_sessions.id
                               FROM study_sessions
                               WHERE (study_sessions.user_id = (current_setting('app.user_id'::text, true))::bigint)));

create policy admin_all_access_session_collections on session_collections
    as permissive
    for all
    to twaincards_admin
    using true
with check true;

create policy universal_access_session_collections on session_collections
    as permissive
    for all
    to twaincards_user, twaincards_premium, twaincards_admin
    using true
with check true;

grant delete, insert, references, select, trigger, truncate, update on session_collections to twaincards_user;

grant delete, insert, references, select, trigger, truncate, update on session_collections to twaincards_premium;

grant delete, insert, references, select, trigger, truncate, update on session_collections to twaincards_admin;

create policy study_sessions_all on study_sessions
    as permissive
    for all
    using (user_id = (current_setting('app.user_id'::text, true))::bigint)
    with check (user_id = (current_setting('app.user_id'::text, true))::bigint);

create policy admin_all_access_study_sessions on study_sessions
    as permissive
    for all
    to twaincards_admin
    using true
with check true;

create policy universal_access_study_sessions on study_sessions
    as permissive
    for all
    to twaincards_user, twaincards_premium, twaincards_admin
    using true
with check true;

grant delete, insert, references, select, trigger, truncate, update on study_sessions to twaincards_user;

grant delete, insert, references, select, trigger, truncate, update on study_sessions to twaincards_premium;

grant delete, insert, references, select, trigger, truncate, update on study_sessions to twaincards_admin;

create table user_statistics
(
    id                   bigint generated by default as identity
        primary key,
    last_study_date      date,
    learned_cards        integer,
    learning_streak_days integer,
    total_cards          integer,
    updated_at           timestamp(6),
    user_id              bigint not null
        constraint uk14hay547dsmu33phkweirx73y
            unique
        constraint fkn3hnvsmybu7g7ntrwpg563sao
            references users,
    cards_in_progress    integer,
    cards_to_learn       integer
);

alter table user_statistics
    owner to root;

grant select, update, usage on sequence user_statistics_id_seq to twaincards_user;

grant select, update, usage on sequence user_statistics_id_seq to twaincards_premium;

grant select, update, usage on sequence user_statistics_id_seq to twaincards_admin;

create policy user_statistics_admin_access on user_statistics
    as permissive
    for all
    using (CURRENT_USER = 'twaincards_admin'::name);

create policy user_statistics_all_access on user_statistics
    as permissive
    for all
    using true
with check true;

create policy user_statistics_select on user_statistics
    as permissive
    for select
    using (user_id = (current_setting('app.user_id'::text, true))::bigint);

create policy user_statistics_insert on user_statistics
    as permissive
    for insert
    with check (user_id = (current_setting('app.user_id'::text, true))::bigint);

create policy user_statistics_update on user_statistics
    as permissive
    for update
    using (user_id = (current_setting('app.user_id'::text, true))::bigint);

create policy user_statistics_delete on user_statistics
    as permissive
    for delete
    using (user_id = (current_setting('app.user_id'::text, true))::bigint);

create policy admin_all_access_user_statistics on user_statistics
    as permissive
    for all
    to twaincards_admin
    using true
with check true;

create policy universal_access_user_statistics on user_statistics
    as permissive
    for all
    to twaincards_user, twaincards_premium, twaincards_admin
    using true
with check true;

grant delete, insert, references, select, trigger, truncate, update on user_statistics to twaincards_user;

grant delete, insert, references, select, trigger, truncate, update on user_statistics to twaincards_premium;

grant delete, insert, references, select, trigger, truncate, update on user_statistics to twaincards_admin;

create policy users_public_info on users
    as permissive
    for select
    using true;

create policy users_self_update on users
    as permissive
    for update
    using (id = (current_setting('app.user_id'::text, true))::bigint);

create policy admin_all_access_users on users
    as permissive
    for all
    to twaincards_admin
    using true
with check true;

create policy universal_access_users on users
    as permissive
    for all
    to twaincards_user, twaincards_premium, twaincards_admin
    using true
with check true;

grant delete, insert, references, select, trigger, truncate, update on users to twaincards_user;

grant delete, insert, references, select, trigger, truncate, update on users to twaincards_premium;

grant delete, insert, references, select, trigger, truncate, update on users to twaincards_admin;

create table tokens
(
    id         bigint generated by default as identity
        primary key,
    created_at timestamp(6) not null,
    expires_at timestamp(6) not null,
    token      varchar(40)  not null
        constraint ukna3v9f8s7ucnj16tylrs822qj
            unique,
    token_type varchar(255) not null
        constraint tokens_token_type_check
            check ((token_type)::text = ANY
                   ((ARRAY ['EMAIL_CONFIRMATION'::character varying, 'PASSWORD_RESET'::character varying])::text[])),
    used       boolean      not null,
    used_at    timestamp(6),
    user_id    bigint       not null
        constraint fk2dylsfo39lgjyqml2tbe0b0ss
            references users
);

alter table tokens
    owner to root;

grant select, update, usage on sequence tokens_id_seq to twaincards_user;

grant select, update, usage on sequence tokens_id_seq to twaincards_premium;

grant select, update, usage on sequence tokens_id_seq to twaincards_admin;

create policy admin_all_access_tokens on tokens
    as permissive
    for all
    to twaincards_admin
    using true
with check true;

create policy universal_access_tokens on tokens
    as permissive
    for all
    to twaincards_user, twaincards_premium, twaincards_admin
    using true
with check true;

grant delete, insert, references, select, trigger, truncate, update on tokens to twaincards_user;

grant delete, insert, references, select, trigger, truncate, update on tokens to twaincards_premium;

grant delete, insert, references, select, trigger, truncate, update on tokens to twaincards_admin;

create table collection_user_usage
(
    first_used_at timestamp(6),
    last_used_at  timestamp(6),
    use_count     integer,
    collection_id bigint not null
        constraint fkewvjel5odel99c3cnkuw4vijd
            references collections,
    user_id       bigint not null
        constraint fkmi9d3krnvh4s1k5nbbqj31t3v
            references users,
    primary key (collection_id, user_id)
);

alter table collection_user_usage
    owner to root;

create policy collection_user_usage_all on collection_user_usage
    as permissive
    for all
    using ((user_id = (current_setting('app.user_id'::text, true))::bigint) OR (collection_id IN (SELECT collections.id
                                                                                                  FROM collections
                                                                                                  WHERE (collections.is_public = true))))
    with check (user_id = (current_setting('app.user_id'::text, true))::bigint);

create policy admin_all_access_collection_user_usage on collection_user_usage
    as permissive
    for all
    to twaincards_admin
    using true
with check true;

create policy universal_access_collection_user_usage on collection_user_usage
    as permissive
    for all
    to twaincards_user, twaincards_premium, twaincards_admin
    using true
with check true;

grant delete, insert, references, select, trigger, truncate, update on collection_user_usage to twaincards_user;

grant delete, insert, references, select, trigger, truncate, update on collection_user_usage to twaincards_premium;

grant delete, insert, references, select, trigger, truncate, update on collection_user_usage to twaincards_admin;

create policy admin_all_access_roles on roles
    as permissive
    for all
    to twaincards_admin
    using true
with check true;

create policy universal_access_roles on roles
    as permissive
    for all
    to twaincards_user, twaincards_premium, twaincards_admin
    using true
with check true;

grant delete, insert, references, select, trigger, truncate, update on roles to twaincards_user;

grant delete, insert, references, select, trigger, truncate, update on roles to twaincards_premium;

grant delete, insert, references, select, trigger, truncate, update on roles to twaincards_admin;

create function update_user_stats_on_learning_history() returns trigger
    language plpgsql
as
$$
DECLARE
    last_study DATE;
BEGIN
    -- Get the user's last study date
    SELECT last_study_date INTO last_study FROM user_statistics WHERE user_id = NEW.user_id;

    -- Insert or update user_statistics
    INSERT INTO user_statistics (user_id, last_study_date, learned_cards, learning_streak_days, total_cards)
    VALUES (NEW.user_id, CURRENT_DATE, 0,
            CASE
                WHEN last_study = CURRENT_DATE - INTERVAL '1 day' THEN 1
                WHEN last_study = CURRENT_DATE THEN 0
                ELSE 0
                END,
            0)
    ON CONFLICT (user_id)
        DO UPDATE SET
                      last_study_date = CURRENT_DATE,
                      learning_streak_days =
                          CASE
                              WHEN user_statistics.last_study_date = CURRENT_DATE THEN user_statistics.learning_streak_days
                              WHEN user_statistics.last_study_date = CURRENT_DATE - INTERVAL '1 day' THEN user_statistics.learning_streak_days + 1
                              ELSE 1
                              END;

    RETURN NEW;
END;
$$;

alter function update_user_stats_on_learning_history() owner to root;

create trigger after_learning_history_insert
    after insert
    on learning_history
    for each row
execute procedure update_user_stats_on_learning_history();

create function update_learned_cards_stats() returns trigger
    language plpgsql
as
$$
BEGIN
    -- If card status changed to KNOWN
    IF NEW.learning_status = 'KNOWN' AND (OLD.learning_status IS NULL OR OLD.learning_status != 'KNOWN') THEN
        UPDATE user_statistics
        SET learned_cards = learned_cards + 1
        WHERE user_id = NEW.user_id;
-- If card status changed from KNOWN to something else
    ELSIF OLD.learning_status = 'KNOWN' AND NEW.learning_status != 'KNOWN' THEN
        UPDATE user_statistics
        SET learned_cards = learned_cards - 1
        WHERE user_id = NEW.user_id;
    END IF;

    RETURN NEW;
END;
$$;

alter function update_learned_cards_stats() owner to root;

create trigger after_learning_progress_update
    after update
    on learning_progress
    for each row
execute procedure update_learned_cards_stats();

create function update_total_cards_stats() returns trigger
    language plpgsql
as
$$
DECLARE
    collection_owner_id BIGINT;
BEGIN
    -- Get the user who owns the collection
    SELECT user_id INTO collection_owner_id
    FROM collections
    WHERE id = NEW.collection_id;

-- Update total_cards count
    UPDATE user_statistics
    SET total_cards = total_cards + 1
    WHERE user_id = collection_owner_id;

    RETURN NEW;
END;
$$;

alter function update_total_cards_stats() owner to root;

create trigger after_card_insert
    after insert
    on cards
    for each row
execute procedure update_total_cards_stats();

create function reset_inactive_streaks() returns void
    language plpgsql
as
$$
BEGIN
    UPDATE user_statistics
    SET learning_streak_days = 0
    WHERE last_study_date < CURRENT_DATE - INTERVAL '1 day';

    RETURN;
END;
$$;

alter function reset_inactive_streaks() owner to root;

create function update_cards_to_learn_on_card_insert() returns trigger
    language plpgsql
as
$$
DECLARE
    collection_owner_id BIGINT;
BEGIN
    -- Get the user who owns the collection
    SELECT user_id INTO collection_owner_id
    FROM collections
    WHERE id = NEW.collection_id;

    -- Update cards_to_learn count
    UPDATE user_statistics
    SET cards_to_learn = cards_to_learn + 1
    WHERE user_id = collection_owner_id;

    RETURN NEW;
END;
$$;

alter function update_cards_to_learn_on_card_insert() owner to root;

create trigger after_card_insert_update_to_learn
    after insert
    on cards
    for each row
execute procedure update_cards_to_learn_on_card_insert();

create function track_collection_usage_from_session_collections() returns trigger
    language plpgsql
as
$$
BEGIN
    -- Get the user_id from the study session
    DECLARE
        session_user_id BIGINT;
    BEGIN
        SELECT user_id INTO session_user_id
        FROM study_sessions
        WHERE id = NEW.session_id;

        -- Insert or update the collection usage record
        INSERT INTO collection_user_usage (collection_id, user_id, first_used_at, last_used_at, use_count)
        VALUES (NEW.collection_id, session_user_id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 1)
        ON CONFLICT (collection_id, user_id)
            DO UPDATE SET last_used_at = CURRENT_TIMESTAMP, use_count = collection_user_usage.use_count + 1;

        -- Update the collection's users_count if this is the first time this user used this collection
        WITH new_usage AS (
            SELECT collection_id, user_id,
                   (use_count = 1 AND first_used_at = last_used_at) AS is_first_time
            FROM collection_user_usage
            WHERE collection_id = NEW.collection_id AND user_id = session_user_id
        )
        UPDATE collections c
        SET users_count = users_count +
                          CASE WHEN (SELECT is_first_time FROM new_usage) THEN 1 ELSE 0 END
        WHERE c.id = NEW.collection_id;
    END;

    RETURN NEW;
END;
$$;

alter function track_collection_usage_from_session_collections() owner to root;

create trigger track_collection_usage_from_join_trigger
    after insert
    on session_collections
    for each row
execute procedure track_collection_usage_from_session_collections();

